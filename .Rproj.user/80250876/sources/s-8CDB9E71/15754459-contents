#load necessary library
library(vars)
library(ggplot2)

#load source functions
source("C:/Users/mlgb2/Desktop/FARPAVA/FarPavaSourceFunctions.R")

#simulation parameters
t=200
locations = seq(from = -10, to = 10, by = 2)
test_locations = c(-7.5,0.5,7.5)
sigma_noise = 0.05
sigma_error = 0
change_speed = 0.235

#simulation
set.seed(2012)

simulation <- Sim_data(t,locations,test_locations,sigma_noise,sigma_error,change_speed)
data.sim <- simulation$data
test_offgrid.sim <- simulation$test

colnames(data.sim) = c("-10","-8","-6","-4","-2","0"
                       ,"2","4","6","8","10")
colnames(test_offgrid.sim) = c("-7.5","0.5","7.5")

data.sim <- data.sim[t:1,]

train.sim <- data.sim[1:(t-10),]
test.sim  <- data.sim[(t-9):(t-5),]

#Fit VAR(1) using train data
VAR_est <- VAR(y = train.sim, p = 1)

#forecast the last 10 time points
forecast <- predict(VAR_est, n.ahead = 5, ci = 0.95)
forecast.sim <- select_n(forecast$fcst,1)
for(k in 2:5){
  forecast.sim <- rbind(forecast.sim, select_n(forecast$fcst,k))
}

#plot train time points
ggplot() +  
  geom_line(mapping=aes(y=train.sim[1,],x=locations,color='early')) +
  geom_line(mapping=aes(y=train.sim[2,],x=locations,color='early')) +
  geom_line(mapping=aes(y=train.sim[3,],x=locations,color='early')) +
  geom_line(mapping=aes(y=train.sim[4,],x=locations,color='early')) +
  geom_line(mapping=aes(y=train.sim[5,],x=locations,color='early')) +
  geom_line(mapping=aes(y=train.sim[153,],x=locations,color='mid')) +
  geom_line(mapping=aes(y=train.sim[154,],x=locations,color='mid')) +
  geom_line(mapping=aes(y=train.sim[155,],x=locations,color='mid')) +
  geom_line(mapping=aes(y=train.sim[156,],x=locations,color='mid')) +
  geom_line(mapping=aes(y=train.sim[157,],x=locations,color='mid')) +
  geom_line(mapping=aes(y=train.sim[186,],x=locations,,color='late')) +
  geom_line(mapping=aes(y=train.sim[187,],x=locations,,color='late')) +
  geom_line(mapping=aes(y=train.sim[188,],x=locations,,color='late')) +
  geom_line(mapping=aes(y=train.sim[189,],x=locations,,color='late')) +
  geom_line(mapping=aes(y=train.sim[190,],x=locations,,color='late')) +
  scale_color_manual(values = c('early'=1, 'mid' = 2, 'late'=3)) +
  xlab("location") + ylab("Probability") + ylim(0,1)+
  ggtitle("Selected Train CDFs Over Time") 

#plot test points
ggplot() +  
  geom_line(mapping=aes(y=test.sim[5,],x=locations,color='t=194')) +
  geom_line(mapping=aes(y=test.sim[4,],x=locations,color='t=193')) +
  geom_line(mapping=aes(y=test.sim[3,],x=locations,color='t=192')) +
  geom_line(mapping=aes(y=test.sim[2,],x=locations,color='t=191')) +
  geom_line(mapping=aes(y=test.sim[1,],x=locations,color='t=190')) +
  scale_color_manual(values = c('t=190'=1, 't=191' = 2, 't=192'=3, 't=193'=4, 't=194'=5)) +
  xlab("location") + ylab("Probability") + ylim(0,1)+
  ggtitle("Test CDFs Over Time") 

#plot forecasted time points
ggplot() +  
  geom_line(mapping=aes(y=select_n(forecast$fcst,5),x=locations,color='t=194')) +
  geom_point(mapping=aes(y=select_n(forecast$fcst,5),x=locations,color='t=194')) +
  geom_line(mapping=aes(y=select_n(forecast$fcst,4),x=locations,color='t=193')) +
  geom_point(mapping=aes(y=select_n(forecast$fcst,4),x=locations,color='t=193')) +
  geom_line(mapping=aes(y=select_n(forecast$fcst,3),x=locations,color='t=192')) +
  geom_point(mapping=aes(y=select_n(forecast$fcst,3),x=locations,color='t=192'))+
  geom_line(mapping=aes(y=select_n(forecast$fcst,2),x=locations,color='t=191')) +
  geom_point(mapping=aes(y=select_n(forecast$fcst,2),x=locations,color='t=191')) +
  geom_line(mapping=aes(y=select_n(forecast$fcst,1),x=locations,color='t=190')) +
  geom_point(mapping=aes(y=select_n(forecast$fcst,1),x=locations,color='t=190')) +
  scale_color_manual(values = c('t=190'=1, 't=191' = 2, 't=192'=3, 't=193'=4, 't=194'=5)) +
  xlab("location") + ylab("Probability") +
  ggtitle("Non-modified Forecast CDFs Over Time") 

#Calculate the RMSE for each time point
RMSE_ingrid <- rep(0,5)
for (i in 1:5){
  RMSE_ingrid[i] <- RMSE(forecast.sim[i,],test.sim[i,])
}
plot(RMSE_ingrid)
timepoints = c(190,191,192,193,194)
ggplot()+
  geom_point(mapping=aes(y=RMSE_ingrid,x=timepoints,size=6), show.legend = FALSE)+
  ylab("RMSE")+ xlab("Time")+
  ggtitle("Ingrid RMSE of Non-modified Forecasting model")
  
#Calculate the RMSE for off grid test points
forecast_offgrid <- matrix(0,5,length(test_locations))
for (i in 1:5){
  for (j in 1:length(test_locations)){
    forecast_offgrid[i,j] <- mchi(locations,forecast.sim[i,],test_locations[j])
  }
}

RMSE_offgrid <- rep(0,5)
for (i in 1:5){
  RMSE_offgrid[i] <- RMSE(forecast_offgrid[i,],test_offgrid.sim[i,])
}
plot(RMSE_offgrid)
ggplot()+
  geom_point(mapping=aes(y=RMSE_offgrid,x=timepoints,color="off grid"),size=4,pch=18)+
  geom_point(mapping=aes(y=RMSE_ingrid,x=timepoints,color="in grid"),size=2,pch=16)+
  ylab("RMSE")+ xlab("Time")  + ylim(0,0.58) +
  scale_color_manual(values = c("in grid"=1, "off grid" = 2)) +
  ggtitle("RMSE of Non-modified Forecasting model")


##now do the pava algorithm to make the function satisfied cdf conditions

#truncated the vector, so that every value is in between 0 and 1
forecast.sim_pava <- forecast.sim
for(i in 1:5){
  forecast.sim_pava[i,] <- iso_reg(tru_func(forecast.sim[i,]))
}
#plot forecast points
ggplot() +  
  geom_line(mapping=aes(y=forecast.sim_pava[5,],x=locations,color='t=194')) +
  geom_point(mapping=aes(y=forecast.sim_pava[5,],x=locations,color='t=194')) +
  geom_line(mapping=aes(y=forecast.sim_pava[4,],x=locations,color='t=193')) +
  geom_point(mapping=aes(y=forecast.sim_pava[4,],x=locations,color='t=193')) +
  geom_line(mapping=aes(y=forecast.sim_pava[3,],x=locations,color='t=192')) +
  geom_point(mapping=aes(y=forecast.sim_pava[3,],x=locations,color='t=192')) +
  geom_line(mapping=aes(y=forecast.sim_pava[2,],x=locations,color='t=191')) +
  geom_point(mapping=aes(y=forecast.sim_pava[2,],x=locations,color='t=191')) +
  geom_line(mapping=aes(y=forecast.sim_pava[1,],x=locations,color='t=190')) +
  geom_point(mapping=aes(y=forecast.sim_pava[1,],x=locations,color='t=190')) +
  scale_color_manual(values = c('t=190'=1, 't=191' = 2, 't=192'=3, 't=193'=4, 't=194'=5)) +
  xlab("location") + ylab("Probability") + ylim(0,1) +
  ggtitle("modified Forecast CDFs Over Time") 

#Calculate the RMSE for each time point
RMSE_ingrid_pava <- rep(0,5)
for (i in 1:5){
  RMSE_ingrid_pava[i] <- RMSE(forecast.sim_pava[i,],test.sim[i,])
}
plot(RMSE_ingrid_pava)

#Calculate the RMSE for off grid test points
forecast_offgrid_pava <- matrix(0,5,length(test_locations))
for (i in 1:5){
  for (j in 1:length(test_locations)){
    forecast_offgrid_pava[i,j] <- mchi(locations,forecast.sim_pava[i,],test_locations[j])
  }
}

RMSE_offgrid_pava <- rep(0,5)
for (i in 1:5){
  RMSE_offgrid_pava[i] <- RMSE(forecast_offgrid_pava[i,],test_offgrid.sim[i+30,])
}
plot(RMSE_offgrid_pava)
ggplot()+
  geom_point(mapping=aes(y=RMSE_offgrid_pava,x=timepoints,color="off grid"),size=4,pch=18)+
  geom_point(mapping=aes(y=RMSE_ingrid_pava,x=timepoints,color="in grid"),size=2,pch=16)+
  ylab("RMSE")+ xlab("Time")+
  scale_color_manual(values = c("in grid"=1, "off grid" = 2)) + ylim(0,0.58)+
  ggtitle("RMSE of Modified Forecasting model")

